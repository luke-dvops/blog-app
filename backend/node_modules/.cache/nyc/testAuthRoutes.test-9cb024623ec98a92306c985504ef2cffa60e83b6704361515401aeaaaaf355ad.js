function cov_28iryjq0wq(){var path="C:\\Users\\User\\Downloads\\blog-app\\backend\\tests\\testAuthRoutes.test.js";var hash="cab8432b8a4442b316e8b7147e90c62a9db22e4c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\User\\Downloads\\blog-app\\backend\\tests\\testAuthRoutes.test.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:12},end:{line:3,column:31}},"3":{start:{line:4,column:19},end:{line:4,column:23}},"4":{start:{line:6,column:0},end:{line:6,column:19}},"5":{start:{line:8,column:21},end:{line:8,column:41}},"6":{start:{line:9,column:18},end:{line:9,column:35}},"7":{start:{line:10,column:29},end:{line:10,column:55}},"8":{start:{line:11,column:26},end:{line:11,column:49}},"9":{start:{line:12,column:26},end:{line:12,column:55}},"10":{start:{line:13,column:0},end:{line:259,column:3}},"11":{start:{line:17,column:1},end:{line:30,column:3}},"12":{start:{line:18,column:2},end:{line:29,column:3}},"13":{start:{line:19,column:16},end:{line:23,column:6}},"14":{start:{line:25,column:4},end:{line:25,column:36}},"15":{start:{line:26,column:4},end:{line:26,column:67}},"16":{start:{line:28,column:4},end:{line:28,column:16}},"17":{start:{line:32,column:0},end:{line:50,column:3}},"18":{start:{line:34,column:23},end:{line:37,column:3}},"19":{start:{line:40,column:2},end:{line:40,column:72}},"20":{start:{line:43,column:19},end:{line:43,column:88}},"21":{start:{line:46,column:2},end:{line:46,column:39}},"22":{start:{line:49,column:2},end:{line:49,column:145}},"23":{start:{line:52,column:0},end:{line:71,column:3}},"24":{start:{line:53,column:2},end:{line:70,column:3}},"25":{start:{line:54,column:16},end:{line:61,column:8}},"26":{start:{line:63,column:4},end:{line:63,column:36}},"27":{start:{line:64,column:4},end:{line:64,column:77}},"28":{start:{line:65,column:4},end:{line:65,column:83}},"29":{start:{line:69,column:4},end:{line:69,column:16}},"30":{start:{line:75,column:2},end:{line:87,column:5}},"31":{start:{line:76,column:16},end:{line:79,column:6}},"32":{start:{line:81,column:4},end:{line:81,column:36}},"33":{start:{line:82,column:4},end:{line:82,column:67}},"34":{start:{line:83,column:4},end:{line:83,column:40}},"35":{start:{line:86,column:4},end:{line:86,column:69}},"36":{start:{line:90,column:2},end:{line:98,column:5}},"37":{start:{line:91,column:16},end:{line:94,column:6}},"38":{start:{line:96,column:4},end:{line:96,column:36}},"39":{start:{line:97,column:4},end:{line:97,column:66}},"40":{start:{line:101,column:2},end:{line:109,column:5}},"41":{start:{line:102,column:16},end:{line:105,column:6}},"42":{start:{line:107,column:4},end:{line:107,column:36}},"43":{start:{line:108,column:4},end:{line:108,column:78}},"44":{start:{line:112,column:2},end:{line:126,column:5}},"45":{start:{line:115,column:16},end:{line:118,column:38}},"46":{start:{line:121,column:4},end:{line:121,column:52}},"47":{start:{line:124,column:4},end:{line:124,column:36}},"48":{start:{line:131,column:23},end:{line:133,column:3}},"49":{start:{line:136,column:2},end:{line:143,column:5}},"50":{start:{line:137,column:4},end:{line:142,column:5}},"51":{start:{line:139,column:6},end:{line:139,column:68}},"52":{start:{line:141,column:6},end:{line:141,column:18}},"53":{start:{line:146,column:2},end:{line:156,column:5}},"54":{start:{line:147,column:4},end:{line:155,column:5}},"55":{start:{line:148,column:23},end:{line:148,column:44}},"56":{start:{line:149,column:18},end:{line:149,column:84}},"57":{start:{line:151,column:6},end:{line:151,column:38}},"58":{start:{line:152,column:6},end:{line:152,column:125}},"59":{start:{line:154,column:6},end:{line:154,column:18}},"60":{start:{line:159,column:2},end:{line:169,column:5}},"61":{start:{line:160,column:4},end:{line:168,column:5}},"62":{start:{line:161,column:23},end:{line:161,column:40}},"63":{start:{line:162,column:18},end:{line:162,column:84}},"64":{start:{line:164,column:6},end:{line:164,column:38}},"65":{start:{line:165,column:6},end:{line:165,column:91}},"66":{start:{line:167,column:6},end:{line:167,column:18}},"67":{start:{line:172,column:24},end:{line:174,column:3}},"68":{start:{line:177,column:2},end:{line:184,column:5}},"69":{start:{line:178,column:4},end:{line:183,column:5}},"70":{start:{line:180,column:6},end:{line:180,column:69}},"71":{start:{line:182,column:6},end:{line:182,column:18}},"72":{start:{line:187,column:2},end:{line:197,column:5}},"73":{start:{line:188,column:4},end:{line:196,column:5}},"74":{start:{line:189,column:20},end:{line:189,column:39}},"75":{start:{line:190,column:18},end:{line:190,column:78}},"76":{start:{line:192,column:6},end:{line:192,column:38}},"77":{start:{line:193,column:6},end:{line:193,column:130}},"78":{start:{line:195,column:6},end:{line:195,column:18}},"79":{start:{line:200,column:2},end:{line:210,column:5}},"80":{start:{line:201,column:4},end:{line:209,column:5}},"81":{start:{line:202,column:20},end:{line:202,column:47}},"82":{start:{line:203,column:18},end:{line:203,column:78}},"83":{start:{line:205,column:6},end:{line:205,column:38}},"84":{start:{line:206,column:6},end:{line:206,column:88}},"85":{start:{line:208,column:6},end:{line:208,column:18}},"86":{start:{line:215,column:0},end:{line:229,column:3}},"87":{start:{line:216,column:2},end:{line:228,column:3}},"88":{start:{line:218,column:29},end:{line:221,column:46}},"89":{start:{line:224,column:4},end:{line:224,column:49}},"90":{start:{line:225,column:4},end:{line:225,column:101}},"91":{start:{line:227,column:4},end:{line:227,column:16}},"92":{start:{line:233,column:0},end:{line:247,column:3}},"93":{start:{line:234,column:2},end:{line:246,column:3}},"94":{start:{line:236,column:29},end:{line:239,column:46}},"95":{start:{line:242,column:4},end:{line:242,column:49}},"96":{start:{line:243,column:4},end:{line:243,column:101}},"97":{start:{line:245,column:4},end:{line:245,column:16}},"98":{start:{line:249,column:2},end:{line:257,column:3}},"99":{start:{line:250,column:4},end:{line:253,column:13}},"100":{start:{line:251,column:6},end:{line:251,column:49}},"101":{start:{line:252,column:6},end:{line:252,column:21}},"102":{start:{line:255,column:4},end:{line:255,column:11}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:42},end:{line:13,column:43}},loc:{start:{line:13,column:48},end:{line:259,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:47},end:{line:17,column:48}},loc:{start:{line:17,column:59},end:{line:30,column:1}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:89},end:{line:32,column:90}},loc:{start:{line:32,column:101},end:{line:50,column:1}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:52,column:55},end:{line:52,column:56}},loc:{start:{line:52,column:67},end:{line:71,column:1}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:75,column:63},end:{line:75,column:64}},loc:{start:{line:75,column:75},end:{line:87,column:3}},line:75},"5":{name:"(anonymous_5)",decl:{start:{line:90,column:80},end:{line:90,column:81}},loc:{start:{line:90,column:92},end:{line:98,column:3}},line:90},"6":{name:"(anonymous_6)",decl:{start:{line:101,column:80},end:{line:101,column:81}},loc:{start:{line:101,column:92},end:{line:109,column:3}},line:101},"7":{name:"(anonymous_7)",decl:{start:{line:112,column:52},end:{line:112,column:53}},loc:{start:{line:112,column:64},end:{line:126,column:3}},line:112},"8":{name:"(anonymous_8)",decl:{start:{line:136,column:9},end:{line:136,column:10}},loc:{start:{line:136,column:21},end:{line:143,column:3}},line:136},"9":{name:"(anonymous_9)",decl:{start:{line:146,column:49},end:{line:146,column:50}},loc:{start:{line:146,column:61},end:{line:156,column:3}},line:146},"10":{name:"(anonymous_10)",decl:{start:{line:159,column:55},end:{line:159,column:56}},loc:{start:{line:159,column:67},end:{line:169,column:3}},line:159},"11":{name:"(anonymous_11)",decl:{start:{line:177,column:9},end:{line:177,column:10}},loc:{start:{line:177,column:21},end:{line:184,column:3}},line:177},"12":{name:"(anonymous_12)",decl:{start:{line:187,column:46},end:{line:187,column:47}},loc:{start:{line:187,column:58},end:{line:197,column:3}},line:187},"13":{name:"(anonymous_13)",decl:{start:{line:200,column:52},end:{line:200,column:53}},loc:{start:{line:200,column:64},end:{line:210,column:3}},line:200},"14":{name:"(anonymous_14)",decl:{start:{line:215,column:39},end:{line:215,column:40}},loc:{start:{line:215,column:51},end:{line:229,column:1}},line:215},"15":{name:"(anonymous_15)",decl:{start:{line:233,column:49},end:{line:233,column:50}},loc:{start:{line:233,column:61},end:{line:247,column:1}},line:233},"16":{name:"(anonymous_16)",decl:{start:{line:249,column:8},end:{line:249,column:9}},loc:{start:{line:249,column:18},end:{line:257,column:1}},line:249},"17":{name:"(anonymous_17)",decl:{start:{line:250,column:15},end:{line:250,column:16}},loc:{start:{line:250,column:21},end:{line:253,column:5}},line:250}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cab8432b8a4442b316e8b7147e90c62a9db22e4c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_28iryjq0wq=function(){return actualCoverage;};}return actualCoverage;}cov_28iryjq0wq();const chai=(cov_28iryjq0wq().s[0]++,require("chai"));const chaiHttp=(cov_28iryjq0wq().s[1]++,require("chai-http"));const app=(cov_28iryjq0wq().s[2]++,require("../index"));// Replace with the actual path to your Express app
const{expect}=(cov_28iryjq0wq().s[3]++,chai);cov_28iryjq0wq().s[4]++;chai.use(chaiHttp);const registerPath=(cov_28iryjq0wq().s[5]++,"/api/auth/register");const loginPath=(cov_28iryjq0wq().s[6]++,"/api/auth/login");const existingUsernamePath=(cov_28iryjq0wq().s[7]++,"/api/auth/check-username");const existingEmailPath=(cov_28iryjq0wq().s[8]++,"/api/auth/check-email");const deleteByEmailPath=(cov_28iryjq0wq().s[9]++,"/api/auth/deleteUser/:email");cov_28iryjq0wq().s[10]++;describe("Testing Authentication Routes",()=>{cov_28iryjq0wq().f[0]++;let token;// Variable to store the authentication token for further requests
// Test case for user registration
cov_28iryjq0wq().s[11]++;it("should register a new user successfully",async()=>{cov_28iryjq0wq().f[1]++;cov_28iryjq0wq().s[12]++;try{const res=(cov_28iryjq0wq().s[13]++,await chai.request(app).post(registerPath).send({username:"luke",email:"luketankl@gmail.com",password:"123456"}));cov_28iryjq0wq().s[14]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[15]++;expect(res.body).to.have.property("username").to.equal("luke");}catch(error){cov_28iryjq0wq().s[16]++;throw error;}});cov_28iryjq0wq().s[17]++;it('should return an error message if username and email combination is already in use',async()=>{cov_28iryjq0wq().f[2]++;// Define an existing user with the same username and email
const existingUser=(cov_28iryjq0wq().s[18]++,{username:'luke',email:'luketankl@gmail.com'});// Register the existing user
cov_28iryjq0wq().s[19]++;await chai.request(app).post('/api/auth/register').send(existingUser);// Try to register the existing user again
const response=(cov_28iryjq0wq().s[20]++,await chai.request(app).post('/api/auth/register').send(existingUser));// Assert that the response status is 400 (Bad Request)
cov_28iryjq0wq().s[21]++;expect(response).to.have.status(400);// Assert that the response body contains the expected error message
cov_28iryjq0wq().s[22]++;expect(response.body).to.have.property('error').to.equal('Username and email combination is already in use. Please choose a new combination.');});cov_28iryjq0wq().s[23]++;it("should continue register a new user successfully",async()=>{cov_28iryjq0wq().f[3]++;cov_28iryjq0wq().s[24]++;try{const res=(cov_28iryjq0wq().s[25]++,await chai.request(app).post("/api/auth/register").send({username:"uniqueusername",email:"uniqueemail@example.com",password:"password123"}));cov_28iryjq0wq().s[26]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[27]++;expect(res.body).to.have.property("username").to.equal("uniqueusername");cov_28iryjq0wq().s[28]++;expect(res.body).to.have.property("email").to.equal("uniqueemail@example.com");// Add more assertions as needed
}catch(error){cov_28iryjq0wq().s[29]++;throw error;}});// Test case for user login
cov_28iryjq0wq().s[30]++;it("should login a user and return an authentication token",async()=>{cov_28iryjq0wq().f[4]++;const res=(cov_28iryjq0wq().s[31]++,await chai.request(app).post(loginPath).send({email:"luketankl@gmail.com",password:"123456"}));cov_28iryjq0wq().s[32]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[33]++;expect(res.body).to.have.property("username").to.equal("luke");cov_28iryjq0wq().s[34]++;expect(res).to.have.cookie("token");// Check if the response has a 'token' cookie
// Save the token for further requests (e.g., authenticated routes)
cov_28iryjq0wq().s[35]++;token=res.headers["set-cookie"][0].split(";")[0].split("=")[1];});// Test case for user login with incorrect username
cov_28iryjq0wq().s[36]++;it("should return an error when attempting to login with incorrect username",async()=>{cov_28iryjq0wq().f[5]++;const res=(cov_28iryjq0wq().s[37]++,await chai.request(app).post(loginPath).send({email:"wrongemail@gmail.com",password:"123456"}));cov_28iryjq0wq().s[38]++;expect(res).to.have.status(404);cov_28iryjq0wq().s[39]++;expect(res.body).to.have.property('error','User not found!');});// Test case for user login with incorrect password
cov_28iryjq0wq().s[40]++;it("should return an error when attempting to login with incorrect password",async()=>{cov_28iryjq0wq().f[6]++;const res=(cov_28iryjq0wq().s[41]++,await chai.request(app).post(loginPath).send({email:"luketankl@gmail.com",password:"wrongpassword"}));cov_28iryjq0wq().s[42]++;expect(res).to.have.status(401);cov_28iryjq0wq().s[43]++;expect(res.body).to.have.property("error").to.equal("Wrong credentials!");});// Test case for refetching user information
cov_28iryjq0wq().s[44]++;it("should refetch user information after login",async()=>{cov_28iryjq0wq().f[7]++;// Assuming you have the 'token' variable containing the JWT from a successful login
const res=(cov_28iryjq0wq().s[45]++,await chai.request(app).get("/api/auth/refetch").set("Cookie",`token=${token}`));// Set the token in the 'Cookie' header
// Log the response to the console for further inspection
cov_28iryjq0wq().s[46]++;console.log("Response from Refetch:",res.body);// Your assertions based on the response
cov_28iryjq0wq().s[47]++;expect(res).to.have.status(200);// Add more assertions based on the expected response
});const existingUser=(cov_28iryjq0wq().s[48]++,{username:"luke"});// Before running the tests, register an existing user
cov_28iryjq0wq().s[49]++;before(async()=>{cov_28iryjq0wq().f[8]++;cov_28iryjq0wq().s[50]++;try{cov_28iryjq0wq().s[51]++;// Register the existing user
await chai.request(app).post(registerPath).send(existingUser);}catch(error){cov_28iryjq0wq().s[52]++;throw error;}});// Test case for checking an existing username
cov_28iryjq0wq().s[53]++;it("should indicate that the username exists",async()=>{cov_28iryjq0wq().f[9]++;cov_28iryjq0wq().s[54]++;try{const username=(cov_28iryjq0wq().s[55]++,existingUser.username);const res=(cov_28iryjq0wq().s[56]++,await chai.request(app).get(`${existingUsernamePath}/${username}`));cov_28iryjq0wq().s[57]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[58]++;expect(res.body).to.deep.equal({exists:true,message:"Username is already in use. Please choose a new username."});}catch(error){cov_28iryjq0wq().s[59]++;throw error;}});// Test case for checking a non-existing username
cov_28iryjq0wq().s[60]++;it("should indicate that the username is available",async()=>{cov_28iryjq0wq().f[10]++;cov_28iryjq0wq().s[61]++;try{const username=(cov_28iryjq0wq().s[62]++,"nonexistinguser");const res=(cov_28iryjq0wq().s[63]++,await chai.request(app).get(`${existingUsernamePath}/${username}`));cov_28iryjq0wq().s[64]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[65]++;expect(res.body).to.deep.equal({exists:false,message:"Username is available."});}catch(error){cov_28iryjq0wq().s[66]++;throw error;}});const existingEmail=(cov_28iryjq0wq().s[67]++,{email:"luketankl@gmail.com"});// Before running the tests, register an existing user
cov_28iryjq0wq().s[68]++;before(async()=>{cov_28iryjq0wq().f[11]++;cov_28iryjq0wq().s[69]++;try{cov_28iryjq0wq().s[70]++;// Register the existing user
await chai.request(app).post(registerPath).send(existingEmail);}catch(error){cov_28iryjq0wq().s[71]++;throw error;}});// Test case for checking an existing username
cov_28iryjq0wq().s[72]++;it("should indicate that the email exists",async()=>{cov_28iryjq0wq().f[12]++;cov_28iryjq0wq().s[73]++;try{const email=(cov_28iryjq0wq().s[74]++,existingEmail.email);const res=(cov_28iryjq0wq().s[75]++,await chai.request(app).get(`${existingEmailPath}/${email}`));cov_28iryjq0wq().s[76]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[77]++;expect(res.body).to.deep.equal({exists:true,message:"Email is already in use. Please use a different email address."});}catch(error){cov_28iryjq0wq().s[78]++;throw error;}});// Test case for checking a non-existing username
cov_28iryjq0wq().s[79]++;it("should indicate that the email is available",async()=>{cov_28iryjq0wq().f[13]++;cov_28iryjq0wq().s[80]++;try{const email=(cov_28iryjq0wq().s[81]++,"nonexistinguser@gmail.com");const res=(cov_28iryjq0wq().s[82]++,await chai.request(app).get(`${existingEmailPath}/${email}`));cov_28iryjq0wq().s[83]++;expect(res).to.have.status(200);cov_28iryjq0wq().s[84]++;expect(res.body).to.deep.equal({exists:false,message:"Email is available."});}catch(error){cov_28iryjq0wq().s[85]++;throw error;}});// Test case for user deletion by email
cov_28iryjq0wq().s[86]++;it("should delete Luke user by email",async()=>{cov_28iryjq0wq().f[14]++;cov_28iryjq0wq().s[87]++;try{// Make a request to delete the user by email
const deleteByEmailRes=(cov_28iryjq0wq().s[88]++,await chai.request(app).delete(deleteByEmailPath.replace(":email","luketankl@gmail.com")).set("Authorization",`Bearer ${token}`));// Set the authorization header with the token
// Check if the user is deleted successfully
cov_28iryjq0wq().s[89]++;expect(deleteByEmailRes).to.have.status(200);cov_28iryjq0wq().s[90]++;expect(deleteByEmailRes.body).to.have.property("message").to.equal("User deleted successfully!");}catch(error){cov_28iryjq0wq().s[91]++;throw error;}});// Test case for user deletion by email
cov_28iryjq0wq().s[92]++;it("should delete UniqueUsername user by email",async()=>{cov_28iryjq0wq().f[15]++;cov_28iryjq0wq().s[93]++;try{// Make a request to delete the user by email
const deleteByEmailRes=(cov_28iryjq0wq().s[94]++,await chai.request(app).delete(deleteByEmailPath.replace(":email","uniqueemail@example.com")).set("Authorization",`Bearer ${token}`));// Set the authorization header with the token
// Check if the user is deleted successfully
cov_28iryjq0wq().s[95]++;expect(deleteByEmailRes).to.have.status(200);cov_28iryjq0wq().s[96]++;expect(deleteByEmailRes.body).to.have.property("message").to.equal("User deleted successfully!");}catch(error){cov_28iryjq0wq().s[97]++;throw error;}});cov_28iryjq0wq().s[98]++;after(done=>{cov_28iryjq0wq().f[16]++;cov_28iryjq0wq().s[99]++;setTimeout(()=>{cov_28iryjq0wq().f[17]++;cov_28iryjq0wq().s[100]++;console.log("Terminating the test suite.");cov_28iryjq0wq().s[101]++;process.exit();},1000);cov_28iryjq0wq().s[102]++;done();});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,