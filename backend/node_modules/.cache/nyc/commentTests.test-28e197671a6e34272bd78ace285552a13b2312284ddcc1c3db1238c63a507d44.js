function cov_gox1rv0qq(){var path="C:\\Users\\User\\Downloads\\blog-app\\backend\\tests\\commentTests.test.js";var hash="294683e5cf6286e9a8c7a3b706c61beef57c5657";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\User\\Downloads\\blog-app\\backend\\tests\\commentTests.test.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:12},end:{line:3,column:31}},"3":{start:{line:4,column:15},end:{line:4,column:28}},"4":{start:{line:5,column:14},end:{line:5,column:30}},"5":{start:{line:6,column:16},end:{line:6,column:44}},"6":{start:{line:8,column:0},end:{line:8,column:19}},"7":{start:{line:10,column:0},end:{line:163,column:3}},"8":{start:{line:11,column:18},end:{line:11,column:256}},"9":{start:{line:13,column:2},end:{line:41,column:5}},"10":{start:{line:14,column:4},end:{line:40,column:5}},"11":{start:{line:16,column:31},end:{line:19,column:7}},"12":{start:{line:21,column:28},end:{line:24,column:31}},"13":{start:{line:26,column:30},end:{line:26,column:65}},"14":{start:{line:28,column:6},end:{line:34,column:7}},"15":{start:{line:33,column:8},end:{line:33,column:64}},"16":{start:{line:36,column:6},end:{line:36,column:51}},"17":{start:{line:38,column:6},end:{line:38,column:50}},"18":{start:{line:39,column:6},end:{line:39,column:18}},"19":{start:{line:43,column:2},end:{line:74,column:5}},"20":{start:{line:44,column:4},end:{line:73,column:5}},"21":{start:{line:46,column:25},end:{line:51,column:7}},"22":{start:{line:54,column:18},end:{line:58,column:25}},"23":{start:{line:61,column:6},end:{line:61,column:34}},"24":{start:{line:62,column:6},end:{line:62,column:37}},"25":{start:{line:63,column:6},end:{line:63,column:47}},"26":{start:{line:64,column:6},end:{line:64,column:46}},"27":{start:{line:65,column:6},end:{line:65,column:46}},"28":{start:{line:66,column:6},end:{line:66,column:46}},"29":{start:{line:68,column:6},end:{line:71,column:8}},"30":{start:{line:72,column:6},end:{line:72,column:18}},"31":{start:{line:76,column:2},end:{line:103,column:5}},"32":{start:{line:77,column:4},end:{line:102,column:5}},"33":{start:{line:79,column:25},end:{line:84,column:7}},"34":{start:{line:87,column:18},end:{line:90,column:25}},"35":{start:{line:93,column:6},end:{line:93,column:34}},"36":{start:{line:94,column:6},end:{line:94,column:37}},"37":{start:{line:95,column:6},end:{line:95,column:58}},"38":{start:{line:97,column:6},end:{line:100,column:8}},"39":{start:{line:101,column:6},end:{line:101,column:18}},"40":{start:{line:105,column:2},end:{line:140,column:5}},"41":{start:{line:107,column:27},end:{line:113,column:5}},"42":{start:{line:116,column:16},end:{line:120,column:27}},"43":{start:{line:123,column:4},end:{line:123,column:32}},"44":{start:{line:125,column:4},end:{line:125,column:35}},"45":{start:{line:126,column:4},end:{line:126,column:44}},"46":{start:{line:129,column:4},end:{line:129,column:51}},"47":{start:{line:130,column:4},end:{line:132,column:41}},"48":{start:{line:135,column:4},end:{line:139,column:5}},"49":{start:{line:136,column:6},end:{line:138,column:44}},"50":{start:{line:142,column:2},end:{line:162,column:5}},"51":{start:{line:144,column:45},end:{line:150,column:5}},"52":{start:{line:153,column:16},end:{line:157,column:45}},"53":{start:{line:160,column:4},end:{line:160,column:32}},"54":{start:{line:161,column:4},end:{line:161,column:35}},"55":{start:{line:165,column:0},end:{line:311,column:3}},"56":{start:{line:168,column:2},end:{line:196,column:5}},"57":{start:{line:169,column:4},end:{line:195,column:5}},"58":{start:{line:171,column:31},end:{line:174,column:7}},"59":{start:{line:176,column:28},end:{line:179,column:31}},"60":{start:{line:181,column:30},end:{line:181,column:65}},"61":{start:{line:183,column:6},end:{line:189,column:7}},"62":{start:{line:188,column:8},end:{line:188,column:64}},"63":{start:{line:191,column:6},end:{line:191,column:51}},"64":{start:{line:193,column:6},end:{line:193,column:50}},"65":{start:{line:194,column:6},end:{line:194,column:18}},"66":{start:{line:198,column:2},end:{line:216,column:5}},"67":{start:{line:200,column:28},end:{line:205,column:5}},"68":{start:{line:208,column:16},end:{line:212,column:28}},"69":{start:{line:214,column:4},end:{line:214,column:32}},"70":{start:{line:215,column:4},end:{line:215,column:35}},"71":{start:{line:218,column:2},end:{line:237,column:5}},"72":{start:{line:219,column:29},end:{line:219,column:32}},"73":{start:{line:222,column:28},end:{line:225,column:5}},"74":{start:{line:228,column:16},end:{line:232,column:28}},"75":{start:{line:234,column:4},end:{line:234,column:32}},"76":{start:{line:235,column:4},end:{line:235,column:35}},"77":{start:{line:236,column:4},end:{line:236,column:56}},"78":{start:{line:239,column:2},end:{line:257,column:5}},"79":{start:{line:240,column:30},end:{line:240,column:56}},"80":{start:{line:243,column:33},end:{line:245,column:5}},"81":{start:{line:248,column:16},end:{line:252,column:33}},"82":{start:{line:255,column:4},end:{line:255,column:32}},"83":{start:{line:256,column:4},end:{line:256,column:35}},"84":{start:{line:259,column:2},end:{line:279,column:5}},"85":{start:{line:260,column:30},end:{line:260,column:56}},"86":{start:{line:263,column:48},end:{line:267,column:5}},"87":{start:{line:270,column:16},end:{line:274,column:48}},"88":{start:{line:277,column:4},end:{line:277,column:32}},"89":{start:{line:278,column:4},end:{line:278,column:35}},"90":{start:{line:281,column:2},end:{line:287,column:5}},"91":{start:{line:282,column:30},end:{line:282,column:46}},"92":{start:{line:284,column:30},end:{line:286,column:5}},"93":{start:{line:289,column:2},end:{line:310,column:5}},"94":{start:{line:290,column:30},end:{line:290,column:56}},"95":{start:{line:293,column:4},end:{line:295,column:51}},"96":{start:{line:298,column:16},end:{line:302,column:42}},"97":{start:{line:305,column:4},end:{line:305,column:32}},"98":{start:{line:306,column:4},end:{line:306,column:35}},"99":{start:{line:309,column:4},end:{line:309,column:40}},"100":{start:{line:313,column:0},end:{line:401,column:3}},"101":{start:{line:316,column:2},end:{line:344,column:5}},"102":{start:{line:317,column:4},end:{line:343,column:5}},"103":{start:{line:319,column:31},end:{line:322,column:7}},"104":{start:{line:324,column:28},end:{line:327,column:31}},"105":{start:{line:329,column:30},end:{line:329,column:65}},"106":{start:{line:331,column:6},end:{line:337,column:7}},"107":{start:{line:336,column:8},end:{line:336,column:64}},"108":{start:{line:339,column:6},end:{line:339,column:51}},"109":{start:{line:341,column:6},end:{line:341,column:50}},"110":{start:{line:342,column:6},end:{line:342,column:18}},"111":{start:{line:346,column:2},end:{line:361,column:5}},"112":{start:{line:347,column:30},end:{line:347,column:56}},"113":{start:{line:349,column:16},end:{line:352,column:33}},"114":{start:{line:354,column:4},end:{line:356,column:5}},"115":{start:{line:355,column:6},end:{line:355,column:50}},"116":{start:{line:358,column:4},end:{line:358,column:32}},"117":{start:{line:359,column:4},end:{line:359,column:35}},"118":{start:{line:360,column:4},end:{line:360,column:55}},"119":{start:{line:363,column:2},end:{line:378,column:5}},"120":{start:{line:364,column:29},end:{line:364,column:32}},"121":{start:{line:366,column:30},end:{line:366,column:56}},"122":{start:{line:369,column:16},end:{line:372,column:40}},"123":{start:{line:375,column:4},end:{line:375,column:32}},"124":{start:{line:376,column:4},end:{line:376,column:35}},"125":{start:{line:377,column:4},end:{line:377,column:56}},"126":{start:{line:380,column:2},end:{line:400,column:5}},"127":{start:{line:381,column:30},end:{line:381,column:56}},"128":{start:{line:384,column:4},end:{line:386,column:51}},"129":{start:{line:389,column:16},end:{line:392,column:33}},"130":{start:{line:395,column:4},end:{line:395,column:32}},"131":{start:{line:396,column:4},end:{line:396,column:35}},"132":{start:{line:399,column:4},end:{line:399,column:40}},"133":{start:{line:403,column:0},end:{line:444,column:3}},"134":{start:{line:404,column:2},end:{line:414,column:5}},"135":{start:{line:405,column:19},end:{line:405,column:32}},"136":{start:{line:407,column:16},end:{line:409,column:42}},"137":{start:{line:411,column:4},end:{line:411,column:32}},"138":{start:{line:412,column:4},end:{line:412,column:34}},"139":{start:{line:416,column:2},end:{line:426,column:5}},"140":{start:{line:417,column:19},end:{line:417,column:38}},"141":{start:{line:419,column:16},end:{line:421,column:42}},"142":{start:{line:423,column:4},end:{line:423,column:32}},"143":{start:{line:424,column:4},end:{line:424,column:34}},"144":{start:{line:425,column:4},end:{line:425,column:37}},"145":{start:{line:429,column:2},end:{line:443,column:5}},"146":{start:{line:430,column:19},end:{line:430,column:32}},"147":{start:{line:433,column:4},end:{line:433,column:76}},"148":{start:{line:435,column:16},end:{line:437,column:42}},"149":{start:{line:439,column:4},end:{line:439,column:32}},"150":{start:{line:442,column:4},end:{line:442,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:28},end:{line:10,column:29}},loc:{start:{line:10,column:34},end:{line:163,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:9},end:{line:13,column:10}},loc:{start:{line:13,column:21},end:{line:41,column:3}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:56},end:{line:43,column:57}},loc:{start:{line:43,column:68},end:{line:74,column:3}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:76,column:63},end:{line:76,column:64}},loc:{start:{line:76,column:75},end:{line:103,column:3}},line:76},"4":{name:"(anonymous_4)",decl:{start:{line:105,column:60},end:{line:105,column:61}},loc:{start:{line:105,column:72},end:{line:140,column:3}},line:105},"5":{name:"(anonymous_5)",decl:{start:{line:142,column:81},end:{line:142,column:82}},loc:{start:{line:142,column:93},end:{line:162,column:3}},line:142},"6":{name:"(anonymous_6)",decl:{start:{line:165,column:28},end:{line:165,column:29}},loc:{start:{line:165,column:34},end:{line:311,column:1}},line:165},"7":{name:"(anonymous_7)",decl:{start:{line:168,column:9},end:{line:168,column:10}},loc:{start:{line:168,column:21},end:{line:196,column:3}},line:168},"8":{name:"(anonymous_8)",decl:{start:{line:198,column:58},end:{line:198,column:59}},loc:{start:{line:198,column:70},end:{line:216,column:3}},line:198},"9":{name:"(anonymous_9)",decl:{start:{line:218,column:75},end:{line:218,column:76}},loc:{start:{line:218,column:87},end:{line:237,column:3}},line:218},"10":{name:"(anonymous_10)",decl:{start:{line:239,column:73},end:{line:239,column:74}},loc:{start:{line:239,column:85},end:{line:257,column:3}},line:239},"11":{name:"(anonymous_11)",decl:{start:{line:259,column:77},end:{line:259,column:78}},loc:{start:{line:259,column:89},end:{line:279,column:3}},line:259},"12":{name:"(anonymous_12)",decl:{start:{line:281,column:57},end:{line:281,column:58}},loc:{start:{line:281,column:69},end:{line:287,column:3}},line:281},"13":{name:"(anonymous_13)",decl:{start:{line:289,column:58},end:{line:289,column:59}},loc:{start:{line:289,column:70},end:{line:310,column:3}},line:289},"14":{name:"(anonymous_14)",decl:{start:{line:313,column:28},end:{line:313,column:29}},loc:{start:{line:313,column:34},end:{line:401,column:1}},line:313},"15":{name:"(anonymous_15)",decl:{start:{line:316,column:9},end:{line:316,column:10}},loc:{start:{line:316,column:21},end:{line:344,column:3}},line:316},"16":{name:"(anonymous_16)",decl:{start:{line:346,column:42},end:{line:346,column:43}},loc:{start:{line:346,column:54},end:{line:361,column:3}},line:346},"17":{name:"(anonymous_17)",decl:{start:{line:363,column:75},end:{line:363,column:76}},loc:{start:{line:363,column:87},end:{line:378,column:3}},line:363},"18":{name:"(anonymous_18)",decl:{start:{line:380,column:60},end:{line:380,column:61}},loc:{start:{line:380,column:72},end:{line:400,column:3}},line:380},"19":{name:"(anonymous_19)",decl:{start:{line:403,column:30},end:{line:403,column:31}},loc:{start:{line:403,column:36},end:{line:444,column:1}},line:403},"20":{name:"(anonymous_20)",decl:{start:{line:404,column:53},end:{line:404,column:54}},loc:{start:{line:404,column:65},end:{line:414,column:3}},line:404},"21":{name:"(anonymous_21)",decl:{start:{line:416,column:73},end:{line:416,column:74}},loc:{start:{line:416,column:85},end:{line:426,column:3}},line:416},"22":{name:"(anonymous_22)",decl:{start:{line:429,column:36},end:{line:429,column:37}},loc:{start:{line:429,column:48},end:{line:443,column:3}},line:429}},branchMap:{"0":{loc:{start:{line:28,column:6},end:{line:34,column:7}},type:"if",locations:[{start:{line:28,column:6},end:{line:34,column:7}},{start:{line:28,column:6},end:{line:34,column:7}}],line:28},"1":{loc:{start:{line:29,column:8},end:{line:31,column:36}},type:"binary-expr",locations:[{start:{line:29,column:8},end:{line:29,column:24}},{start:{line:30,column:8},end:{line:30,column:39}},{start:{line:31,column:8},end:{line:31,column:36}}],line:29},"2":{loc:{start:{line:135,column:4},end:{line:139,column:5}},type:"if",locations:[{start:{line:135,column:4},end:{line:139,column:5}},{start:{line:135,column:4},end:{line:139,column:5}}],line:135},"3":{loc:{start:{line:183,column:6},end:{line:189,column:7}},type:"if",locations:[{start:{line:183,column:6},end:{line:189,column:7}},{start:{line:183,column:6},end:{line:189,column:7}}],line:183},"4":{loc:{start:{line:184,column:8},end:{line:186,column:36}},type:"binary-expr",locations:[{start:{line:184,column:8},end:{line:184,column:24}},{start:{line:185,column:8},end:{line:185,column:39}},{start:{line:186,column:8},end:{line:186,column:36}}],line:184},"5":{loc:{start:{line:331,column:6},end:{line:337,column:7}},type:"if",locations:[{start:{line:331,column:6},end:{line:337,column:7}},{start:{line:331,column:6},end:{line:337,column:7}}],line:331},"6":{loc:{start:{line:332,column:8},end:{line:334,column:36}},type:"binary-expr",locations:[{start:{line:332,column:8},end:{line:332,column:24}},{start:{line:333,column:8},end:{line:333,column:39}},{start:{line:334,column:8},end:{line:334,column:36}}],line:332},"7":{loc:{start:{line:354,column:4},end:{line:356,column:5}},type:"if",locations:[{start:{line:354,column:4},end:{line:356,column:5}},{start:{line:354,column:4},end:{line:356,column:5}}],line:354}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"294683e5cf6286e9a8c7a3b706c61beef57c5657"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_gox1rv0qq=function(){return actualCoverage;};}return actualCoverage;}cov_gox1rv0qq();const chai=(cov_gox1rv0qq().s[0]++,require("chai"));const chaiHttp=(cov_gox1rv0qq().s[1]++,require("chai-http"));const app=(cov_gox1rv0qq().s[2]++,require("../index"));const should=(cov_gox1rv0qq().s[3]++,chai.should());const sinon=(cov_gox1rv0qq().s[4]++,require("sinon"));const Comment=(cov_gox1rv0qq().s[5]++,require("../models/Comment"));cov_gox1rv0qq().s[6]++;chai.use(chaiHttp);cov_gox1rv0qq().s[7]++;describe("Create comments",()=>{cov_gox1rv0qq().f[0]++;let authToken=(cov_gox1rv0qq().s[8]++,"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWI5MDk5MDA3OTEyNmI2ZjZmYzJlMjEiLCJ1c2VybmFtZSI6Imx1a2UiLCJlbWFpbCI6Imx1a2V0YW5rbEBnbWFpbC5jb20iLCJpYXQiOjE3MDY2MjU0MjQsImV4cCI6MTcwNjg4NDYyNH0.Vq0HK6z7YvINgnOP11VjbPpDPZQ4U4YnfBJEQb2DHHM");// Variable to store the authentication token
cov_gox1rv0qq().s[9]++;before(async()=>{cov_gox1rv0qq().f[1]++;cov_gox1rv0qq().s[10]++;try{// Perform user login and obtain the authentication token
const loginCredentials=(cov_gox1rv0qq().s[11]++,{email:"qj1@gmail.com",password:"qj1"});const loginResponse=(cov_gox1rv0qq().s[12]++,await chai.request(app).post("/api/auth/login").send(loginCredentials));const setCookieHeader=(cov_gox1rv0qq().s[13]++,loginResponse.headers["set-cookie"]);cov_gox1rv0qq().s[14]++;if((cov_gox1rv0qq().b[1][0]++,!setCookieHeader)||(cov_gox1rv0qq().b[1][1]++,!Array.isArray(setCookieHeader))||(cov_gox1rv0qq().b[1][2]++,setCookieHeader.length===0)){cov_gox1rv0qq().b[0][0]++;cov_gox1rv0qq().s[15]++;throw new Error("Cookie header is missing or invalid.");}else{cov_gox1rv0qq().b[0][1]++;}cov_gox1rv0qq().s[16]++;authToken=setCookieHeader[0].split(";")[0];// Extract the token from cookies
}catch(error){cov_gox1rv0qq().s[17]++;console.error("Error during login:",error);cov_gox1rv0qq().s[18]++;throw error;// Fail the test if there's an error during login
}});cov_gox1rv0qq().s[19]++;it("should create a new comment with authentication",async()=>{cov_gox1rv0qq().f[2]++;cov_gox1rv0qq().s[20]++;try{// Create a comment with the obtained authentication token
const newComment=(cov_gox1rv0qq().s[21]++,{comment:"This is a test comment with login.",author:"testUser",postId:"6562dcb608a806628f5f29b5",// Use the postId obtained from the previous test
userId:"65603b07d7debecc85789dfc"});// Make a request to create a comment with the logged-in user
const res=(cov_gox1rv0qq().s[22]++,await chai.request(app).post("/api/comments/create").set("Cookie",[authToken])// Include the authentication token in the request cookies
.send(newComment));// Validate the response status or other criteria if needed
cov_gox1rv0qq().s[23]++;res.should.have.status(200);cov_gox1rv0qq().s[24]++;res.body.should.be.a("object");cov_gox1rv0qq().s[25]++;res.body.should.have.property("comment");cov_gox1rv0qq().s[26]++;res.body.should.have.property("author");cov_gox1rv0qq().s[27]++;res.body.should.have.property("postId");cov_gox1rv0qq().s[28]++;res.body.should.have.property("userId");}catch(error){cov_gox1rv0qq().s[29]++;console.error("Error during comment creation with authentication:",error);cov_gox1rv0qq().s[30]++;throw error;// Fail the test if there's an error during comment creation
}});cov_gox1rv0qq().s[31]++;it("should not create a new comment without authentication",async()=>{cov_gox1rv0qq().f[3]++;cov_gox1rv0qq().s[32]++;try{// Attempt to create a comment without authentication
const newComment=(cov_gox1rv0qq().s[33]++,{comment:"This is a test comment without login.",author:"testUser",postId:"6562dcb608a806628f5f29b5",userId:"65603b07d7debecc85789dfc"});// Make a request to create a comment without authentication
const res=(cov_gox1rv0qq().s[34]++,await chai.request(app).post("/api/comments/create").send(newComment));// Validate that the response indicates a lack of authentication
cov_gox1rv0qq().s[35]++;res.should.have.status(401);cov_gox1rv0qq().s[36]++;res.body.should.be.a("string");// Update the expectation to a string
cov_gox1rv0qq().s[37]++;res.body.should.equal("You are not authenticated!");}catch(error){cov_gox1rv0qq().s[38]++;console.error("Error during comment creation without authentication:",error);cov_gox1rv0qq().s[39]++;throw error;// Fail the test if there's an error during comment creation without authentication
}});cov_gox1rv0qq().s[40]++;it("should not create a new comment with missing fields",async()=>{cov_gox1rv0qq().f[4]++;// Attempt to create a comment with invalid data
const invalidComment=(cov_gox1rv0qq().s[41]++,{comment:"This is a test comment with invalid data",author:"",postId:"6562dcb608a806628f5f29b5",userId:"65603b07d7debecc85789dfc"// Include invalid or missing fields here
});// Make a request to create a comment with invalid data
const res=(cov_gox1rv0qq().s[42]++,await chai.request(app).post("/api/comments/create").set("Cookie",[authToken]).send(invalidComment));// Validate that the response indicates a validation error
cov_gox1rv0qq().s[43]++;res.should.have.status(500);cov_gox1rv0qq().s[44]++;res.body.should.be.a("object");cov_gox1rv0qq().s[45]++;res.body.should.have.property("errors");// Check for errors on the author field
cov_gox1rv0qq().s[46]++;res.body.errors.should.have.property("author");cov_gox1rv0qq().s[47]++;res.body.errors.author.should.have.property("message").eql("Path `author` is required.");// Check for errors on the comment field (if applicable)
cov_gox1rv0qq().s[48]++;if("comment"in res.body.errors){cov_gox1rv0qq().b[2][0]++;cov_gox1rv0qq().s[49]++;res.body.errors.comment.should.have.property("message").eql("Path `comment` is required.");}else{cov_gox1rv0qq().b[2][1]++;}});cov_gox1rv0qq().s[50]++;it("should create a new comment with valid data and ignore additional fields",async()=>{cov_gox1rv0qq().f[5]++;// Provide valid comment data with additional fields
const validCommentWithAdditionalFields=(cov_gox1rv0qq().s[51]++,{comment:"This comment has additional fields.",author:"testUser",postId:"6562dcb608a806628f5f29b5",userId:"65603b07d7debecc85789dfc",additionalField:"additionalValue"// Additional field not expected by the server
});// Make a request to create a comment with additional fields
const res=(cov_gox1rv0qq().s[52]++,await chai.request(app).post("/api/comments/create").set("Cookie",[authToken]).send(validCommentWithAdditionalFields));// Validate that the response indicates a successful comment creation
cov_gox1rv0qq().s[53]++;res.should.have.status(200);// Adjust based on your server's behavior
cov_gox1rv0qq().s[54]++;res.body.should.be.a("object");});});cov_gox1rv0qq().s[55]++;describe("Update comments",()=>{cov_gox1rv0qq().f[6]++;let authToken;// Variable to store the authentication token
cov_gox1rv0qq().s[56]++;before(async()=>{cov_gox1rv0qq().f[7]++;cov_gox1rv0qq().s[57]++;try{// Perform user login and obtain the authentication token
const loginCredentials=(cov_gox1rv0qq().s[58]++,{email:"qj1@gmail.com",password:"qj1"});const loginResponse=(cov_gox1rv0qq().s[59]++,await chai.request(app).post("/api/auth/login").send(loginCredentials));const setCookieHeader=(cov_gox1rv0qq().s[60]++,loginResponse.headers["set-cookie"]);cov_gox1rv0qq().s[61]++;if((cov_gox1rv0qq().b[4][0]++,!setCookieHeader)||(cov_gox1rv0qq().b[4][1]++,!Array.isArray(setCookieHeader))||(cov_gox1rv0qq().b[4][2]++,setCookieHeader.length===0)){cov_gox1rv0qq().b[3][0]++;cov_gox1rv0qq().s[62]++;throw new Error("Cookie header is missing or invalid.");}else{cov_gox1rv0qq().b[3][1]++;}cov_gox1rv0qq().s[63]++;authToken=setCookieHeader[0].split(";")[0];// Extract the token from cookies
}catch(error){cov_gox1rv0qq().s[64]++;console.error("Error during login:",error);cov_gox1rv0qq().s[65]++;throw error;// Fail the test if there's an error during login
}});cov_gox1rv0qq().s[66]++;it("should update an existing comment with valid data",async()=>{cov_gox1rv0qq().f[8]++;// Provide valid data for the update
const validUpdateData=(cov_gox1rv0qq().s[67]++,{comment:"This comment has been updated.",author:"testtest",postId:"65b2a1f6ccf2d0a949d2a92",userId:"655f2854842eab48af35e7c5"});// Make a request to update the comment with valid data
const res=(cov_gox1rv0qq().s[68]++,await chai.request(app).put("/api/comments/65603b07d7debecc85789dfb").set("Cookie",[authToken]).send(validUpdateData));cov_gox1rv0qq().s[69]++;res.should.have.status(200);cov_gox1rv0qq().s[70]++;res.body.should.be.a("object");});cov_gox1rv0qq().s[71]++;it("should not update an existing comment without proper authorization",async()=>{cov_gox1rv0qq().f[9]++;const invalidAuthToken=(cov_gox1rv0qq().s[72]++,"0");// Provide valid data for the update
const validUpdateData=(cov_gox1rv0qq().s[73]++,{comment:"Updated comment content.",author:"updatedAuthor"});// Make a request to update the comment without proper authorization
const res=(cov_gox1rv0qq().s[74]++,await chai.request(app).put(`/api/comments/656353ebb5c7b318613b3056`).set("Cookie",[invalidAuthToken]).send(validUpdateData));cov_gox1rv0qq().s[75]++;res.should.have.status(401);// Assuming 401 is the status for authentication failure
cov_gox1rv0qq().s[76]++;res.body.should.be.a("string");// Update the expectation to a string
cov_gox1rv0qq().s[77]++;res.body.should.equal("You are not authenticated!");// Adjust based on the actual error message
});cov_gox1rv0qq().s[78]++;it("should not update a comment with empty update data (empty array)",async()=>{cov_gox1rv0qq().f[10]++;const commentIdToUpdate=(cov_gox1rv0qq().s[79]++,"656353ebb5c7b318613b3056");// Provide an empty update data payload with an empty array
const emptyArrayUpdateData=(cov_gox1rv0qq().s[80]++,{yourArrayField:[]});// Make an HTTP request to update the comment with empty array in the update data
const res=(cov_gox1rv0qq().s[81]++,await chai.request(app).put(`/api/comments/${commentIdToUpdate}`).set("Cookie",[authToken]).send(emptyArrayUpdateData));// Validate that the response indicates an error related to the update data
cov_gox1rv0qq().s[82]++;res.should.have.status(400);cov_gox1rv0qq().s[83]++;res.body.should.be.a("object");});cov_gox1rv0qq().s[84]++;it("should update a comment with valid data and ignore additional fields",async()=>{cov_gox1rv0qq().f[11]++;const commentIdToUpdate=(cov_gox1rv0qq().s[85]++,"65603b07d7debecc85789dfb");// Provide valid data for the update with additional fields
const validUpdateDataWithAdditionalFields=(cov_gox1rv0qq().s[86]++,{comment:"Updated comment content.",author:"updatedAuthor",additionalField:"additionalValue"// Additional field not expected by the server
});// Make a request to update the comment with additional fields
const res=(cov_gox1rv0qq().s[87]++,await chai.request(app).put(`/api/comments/${commentIdToUpdate}`).set("Cookie",[authToken]).send(validUpdateDataWithAdditionalFields));// Validate that the response indicates a successful comment update
cov_gox1rv0qq().s[88]++;res.should.have.status(200);cov_gox1rv0qq().s[89]++;res.body.should.be.a("object");});cov_gox1rv0qq().s[90]++;it("should update a comment with partial update data",async()=>{cov_gox1rv0qq().f[12]++;const commentIdToUpdate=(cov_gox1rv0qq().s[91]++,"validCommentId");const partialUpdateData=(cov_gox1rv0qq().s[92]++,{comment:"Updated comment content."});});cov_gox1rv0qq().s[93]++;it("should handle server errors during comment update",async()=>{cov_gox1rv0qq().f[13]++;const commentIdToUpdate=(cov_gox1rv0qq().s[94]++,"6562dcb608a806628f5f29b5");// Mock a server error during the update process
cov_gox1rv0qq().s[95]++;sinon.stub(Comment,"findByIdAndUpdate").throws(new Error("Simulated server error"));// Make a request to update the comment
const res=(cov_gox1rv0qq().s[96]++,await chai.request(app).put(`/api/comments/${commentIdToUpdate}`).set("Cookie",[authToken]).send({updatedField:"new value"}));// Validate that the response indicates a server error
cov_gox1rv0qq().s[97]++;res.should.have.status(500);cov_gox1rv0qq().s[98]++;res.body.should.be.a("object");// Restore the original function after the test
cov_gox1rv0qq().s[99]++;Comment.findByIdAndUpdate.restore();});});cov_gox1rv0qq().s[100]++;describe("Delete comments",()=>{cov_gox1rv0qq().f[14]++;let authToken;// Variable to store the authentication token
cov_gox1rv0qq().s[101]++;before(async()=>{cov_gox1rv0qq().f[15]++;cov_gox1rv0qq().s[102]++;try{// Perform user login and obtain the authentication token
const loginCredentials=(cov_gox1rv0qq().s[103]++,{email:"qj1@gmail.com",password:"qj1"});const loginResponse=(cov_gox1rv0qq().s[104]++,await chai.request(app).post("/api/auth/login").send(loginCredentials));const setCookieHeader=(cov_gox1rv0qq().s[105]++,loginResponse.headers["set-cookie"]);cov_gox1rv0qq().s[106]++;if((cov_gox1rv0qq().b[6][0]++,!setCookieHeader)||(cov_gox1rv0qq().b[6][1]++,!Array.isArray(setCookieHeader))||(cov_gox1rv0qq().b[6][2]++,setCookieHeader.length===0)){cov_gox1rv0qq().b[5][0]++;cov_gox1rv0qq().s[107]++;throw new Error("Cookie header is missing or invalid.");}else{cov_gox1rv0qq().b[5][1]++;}cov_gox1rv0qq().s[108]++;authToken=setCookieHeader[0].split(";")[0];// Extract the token from cookies
}catch(error){cov_gox1rv0qq().s[109]++;console.error("Error during login:",error);cov_gox1rv0qq().s[110]++;throw error;// Fail the test if there's an error during login
}});cov_gox1rv0qq().s[111]++;it("should delete an existing comment",async()=>{cov_gox1rv0qq().f[16]++;const commentIdToDelete=(cov_gox1rv0qq().s[112]++,"6562dcb608a806628f5f29b5");const res=(cov_gox1rv0qq().s[113]++,await chai.request(app).delete(`/api/comments/${commentIdToDelete}`).set("Cookie",[authToken]));cov_gox1rv0qq().s[114]++;if(res.status!==200){cov_gox1rv0qq().b[7][0]++;cov_gox1rv0qq().s[115]++;console.error("Server response:",res.body);}else{cov_gox1rv0qq().b[7][1]++;}cov_gox1rv0qq().s[116]++;res.should.have.status(200);cov_gox1rv0qq().s[117]++;res.body.should.be.a("string");cov_gox1rv0qq().s[118]++;res.body.should.equal("Comment has been deleted!");});cov_gox1rv0qq().s[119]++;it("should not delete an existing comment without proper authorization",async()=>{cov_gox1rv0qq().f[17]++;const invalidAuthToken=(cov_gox1rv0qq().s[120]++,"0");const commentIdToDelete=(cov_gox1rv0qq().s[121]++,"6562dcb608a806628f5f29b5");// Make a request to delete the comment without proper authorization
const res=(cov_gox1rv0qq().s[122]++,await chai.request(app).delete(`/api/comments/${commentIdToDelete}`).set("Cookie",[invalidAuthToken]));// Validate that the response indicates a lack of authentication
cov_gox1rv0qq().s[123]++;res.should.have.status(401);cov_gox1rv0qq().s[124]++;res.body.should.be.a("string");cov_gox1rv0qq().s[125]++;res.body.should.equal("You are not authenticated!");});cov_gox1rv0qq().s[126]++;it("should handle server errors during comment deletion",async()=>{cov_gox1rv0qq().f[18]++;const commentIdToDelete=(cov_gox1rv0qq().s[127]++,"6562dcb608a806628f5f29b5");// Mock a server error during the deletion process
cov_gox1rv0qq().s[128]++;sinon.stub(Comment,"findByIdAndDelete").throws(new Error("Simulated server error"));// Make a request to delete the comment
const res=(cov_gox1rv0qq().s[129]++,await chai.request(app).delete(`/api/comments/${commentIdToDelete}`).set("Cookie",[authToken]));// Validate that the response indicates a server error
cov_gox1rv0qq().s[130]++;res.should.have.status(500);cov_gox1rv0qq().s[131]++;res.body.should.be.a("object");// Restore the original function after the test
cov_gox1rv0qq().s[132]++;Comment.findByIdAndDelete.restore();});});cov_gox1rv0qq().s[133]++;describe("Get Post Comments",()=>{cov_gox1rv0qq().f[19]++;cov_gox1rv0qq().s[134]++;it("should retrieve comments for a specific post",async()=>{cov_gox1rv0qq().f[20]++;const postId=(cov_gox1rv0qq().s[135]++,"validPostId");// Replace with a valid post ID
const res=(cov_gox1rv0qq().s[136]++,await chai.request(app).get(`/api/comments/post/${postId}`));cov_gox1rv0qq().s[137]++;res.should.have.status(200);cov_gox1rv0qq().s[138]++;res.body.should.be.a("array");// Additional checks on the response body can be added here
});cov_gox1rv0qq().s[139]++;it("should return an empty array if no comments are found for a post",async()=>{cov_gox1rv0qq().f[21]++;const postId=(cov_gox1rv0qq().s[140]++,"nonExistingPostId");// Use a post ID that has no comments
const res=(cov_gox1rv0qq().s[141]++,await chai.request(app).get(`/api/comments/post/${postId}`));cov_gox1rv0qq().s[142]++;res.should.have.status(200);cov_gox1rv0qq().s[143]++;res.body.should.be.a("array");cov_gox1rv0qq().s[144]++;res.body.length.should.be.eql(0);});// Mock server error
cov_gox1rv0qq().s[145]++;it("should handle server errors",async()=>{cov_gox1rv0qq().f[22]++;const postId=(cov_gox1rv0qq().s[146]++,"validPostId");// Replace with a valid post ID
// Simulate a server error
cov_gox1rv0qq().s[147]++;sinon.stub(Comment,"find").throws(new Error("Simulated server error"));const res=(cov_gox1rv0qq().s[148]++,await chai.request(app).get(`/api/comments/post/${postId}`));cov_gox1rv0qq().s[149]++;res.should.have.status(500);// Restore the original function after the test
cov_gox1rv0qq().s[150]++;Comment.find.restore();});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,